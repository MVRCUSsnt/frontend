import React, { useState, useEffect } from "react";
import "./Sidebar.css";
import Login from "../../authForm/login/Login";
import Registration from "../../authForm/registration/Registration";
import UserProfile from "./userProfile/UserProfile";
import ChatList from "./—ÅhatList/ChatList";

const Sidebar = ({ activeChatId, onSelectChat }) => {
    const [isSidebarOpen, setIsSidebarOpen] = useState(true);
    const [isProfileOpen, setIsProfileOpen] = useState(false);
    const [formType, setFormType] = useState(null);
    const [personalChats, setPersonalChats] = useState([]);
    const [groupChats, setGroupChats] = useState([{ id: 1, name: "Main Room", description: "–û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞" }]);
    const [isGroupsLoaded, setIsGroupsLoaded] = useState(false);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(null);
    const [isPersonal, setIsPersonal] = useState(true);
    const [isLoggedIn, setIsLoggedIn] = useState(!!localStorage.getItem("user")); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

    useEffect(() => {
        const storedUser = localStorage.getItem("user");
        const storedUserId = localStorage.getItem("userId");

        if (!storedUser || storedUser === "null" || storedUserId === "null") {
            localStorage.removeItem("user");
            localStorage.removeItem("userId");
            localStorage.removeItem("email");
            localStorage.removeItem("avatarUrl");
            setIsProfileOpen(false);
            setIsLoggedIn(false);
        } else {
            fetchGroupChats(); // üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º —á–∞—Ç—ã –ø—Ä–∏ –≤—Ö–æ–¥–µ
        }
    }, []);

    const fetchGroupChats = () => {
        if (isGroupsLoaded) return;

        setLoading(true);
        fetch("http://localhost:8080/api/rooms/my-rooms?page=0&size=10", {
            method: "GET",
            credentials: "include",
        })
            .then(response => response.json())
            .then(data => {
                // ‚úÖ –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                const uniqueChats = [...new Map(data.map(chat => [chat.id, chat])).values()];

                // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º "Main Room" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ
                const updatedChats = uniqueChats.some(chat => chat.id === 1)
                    ? uniqueChats
                    : [{ id: 1, name: "Main Room", description: "–û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞" }, ...uniqueChats];

                setGroupChats(updatedChats);
                setIsGroupsLoaded(true);
            })
            .catch(error => setError(error.message))
            .finally(() => setLoading(false));
    };

    const handleAddGroupChat = () => {
        const groupName = prompt("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã:");
        if (!groupName) return;

        const groupDescription = prompt("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã:");

        const newRoom = {
            name: groupName,
            description: groupDescription || "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
        };

        fetch("http://localhost:8080/api/rooms/create", {
            method: "POST",
            credentials: "include",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(newRoom),
        })
            .then(response => response.json())
            .then(createdRoom => {
                setGroupChats(prev => [...prev, createdRoom]); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫
            })
            .catch(error => alert(`–û—à–∏–±–∫–∞: ${error.message}`));
    };

    // üîπ –õ–æ–≥–∞—É—Ç: –û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–æ–≤, —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ä–µ–Ω–¥–µ—Ä Main Room
    const handleLogout = async () => {
        try {
            await fetch("http://localhost:8080/api/auth/logout", {
                method: "POST",
                credentials: "include",
            });
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:", error);
        }

        // ‚ùó –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        localStorage.removeItem("user");
        localStorage.removeItem("userId");
        localStorage.removeItem("email");
        localStorage.removeItem("avatarUrl");
        setIsProfileOpen(false);
        setIsLoggedIn(false);

        // ‚ùó –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
        setPersonalChats([]);
        setGroupChats([{ id: 1, name: "Main Room", description: "–û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞" }]);

        // ‚ùó –û–±–Ω–æ–≤–ª—è–µ–º UI
        setIsGroupsLoaded(false);

        // ‚ùó –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ–Ω–¥–µ—Ä–∏–º Main Room (ID 1)
        onSelectChat(1);
    };

    // üîπ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (–≤—Ö–æ–¥)
    const handleLogin = (userData) => {
        localStorage.setItem("user", userData.username);
        localStorage.setItem("userId", userData.id);
        localStorage.setItem("email", userData.email || "");
        localStorage.setItem("avatarUrl", userData.avatarUrl || "/default-avatar.webp");

        setIsLoggedIn(true);
        setIsProfileOpen(false); // ‚ùó –ü—Ä–æ—Ñ–∏–ª—å –ù–ï –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        setFormType(null); // ‚ùó –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –ª–æ–≥–∏–Ω–∞
        fetchGroupChats(); // üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º —á–∞—Ç—ã –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
    };

    return (
        <>
            <button className="toggle-sidebar" onClick={() => setIsSidebarOpen(!isSidebarOpen)}>‚ò∞</button>

            <div className={`sidebar ${isSidebarOpen ? "open" : ""}`}>
                <div className="profile-container" onClick={() => localStorage.getItem("user") ? setIsProfileOpen(!isProfileOpen) : setFormType("login")}>
                    <img src={localStorage.getItem("avatarUrl") || "/default-avatar.webp"} alt="Avatar" className="profile-avatar" />
                    <div className="profile-name">{localStorage.getItem("user") || "Login"}</div>
                </div>

                <ChatList
                    personalChats={personalChats}
                    groupChats={groupChats}
                    activeChatId={activeChatId}
                    onSelectChat={onSelectChat}
                    isPersonal={isPersonal}
                    setIsPersonal={(value) => {
                        setIsPersonal(value);
                        if (!value) fetchGroupChats();
                    }}
                    onAddGroupChat={handleAddGroupChat} // ‚ùó –ö–Ω–æ–ø–∫–∞ "+" —Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
                />

                {loading && <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>}
                {error && <p className="error">{error}</p>}
            </div>

            {isProfileOpen && localStorage.getItem("user") && (
                <UserProfile
                    onLogout={handleLogout} // –ü–µ—Ä–µ–¥–∞–µ–º –ª–æ–≥–∞—É—Ç
                    onClose={() => setIsProfileOpen(false)}
                    username={localStorage.getItem("user")}
                />
            )}

            {formType && (
                <div className="auth-overlay">
                    {formType === "login" && <Login onSubmit={handleLogin} onClose={() => setFormType(null)} onSwitch={() => setFormType("register")} />}
                    {formType === "register" && <Registration onSubmit={handleLogin} onClose={() => setFormType(null)} onSwitch={() => setFormType("login")} />}
                </div>
            )}
        </>
    );
};

export default Sidebar;
