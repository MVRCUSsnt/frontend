import React, { useEffect, useState, useCallback } from "react";
import "./ChatContainer.css";
import Message from "./message/Message";
import WebSocketService from "./WebSocketService";

const ChatContainer = ({ activeChatId, chatInfo, onChangeChat, userId }) => {
    const [messages, setMessages] = useState([]);
    const [newMessage, setNewMessage] = useState("");
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [users, setUsers] = useState([]);
    const [isUsersModalOpen, setIsUsersModalOpen] = useState(false);
    const [selectedMessage, setSelectedMessage] = useState(null);
    const [editedMessage, setEditedMessage] = useState("");

    // üîπ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π `fetchMessages`
    const fetchMessages = useCallback(() => {
        if (!activeChatId) return;

        fetch(`http://localhost:8080/api/messages/${activeChatId}`, {
            method: "GET",
            credentials: "include",
        })
            .then(response => response.json())
            .then(data => {
                console.log("üì© –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", data);
                setMessages(data.map(msg => ({
                    id: msg.messageId, // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ID —Å–æ–æ–±—â–µ–Ω–∏—è
                    roomId: msg.roomId,
                    content: msg.content,
                    timestamp: msg.timestamp,
                    userDTO: msg.userDTO
                })));
            })
            .catch(error => console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:", error));
    }, [activeChatId]);

    // üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ —Å–º–µ–Ω–µ —á–∞—Ç–∞
    useEffect(() => {
        setMessages([]); // –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–æ–≤—ã—Ö
        fetchMessages();
    }, [fetchMessages]);

    // üîπ WebSocket –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–æ–≤—ã–π —á–∞—Ç
    useEffect(() => {
        if (!activeChatId) return;

        WebSocketService.connect(() => {
            WebSocketService.subscribeToChat(activeChatId, (newMessage) => {
                setMessages(prev => [...prev, newMessage]); // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫
            });
        });

        return () => {
            WebSocketService.unsubscribeFromChat(activeChatId);
        };
    }, [activeChatId]);

    // üîπ –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    const sendMessage = () => {
        if (!newMessage.trim()) return;

        const messageData = {
            content: newMessage,
            roomId: activeChatId,
            timestamp: new Date().toISOString(),
            userDTO: {
                id: userId || parseInt(localStorage.getItem("userId"), 10), // ‚úÖ –¢–µ–ø–µ—Ä—å id –≤–Ω—É—Ç—Ä–∏ userDTO
            }
        };


        fetch("http://localhost:8080/api/messages/write", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            credentials: "include",
            body: JSON.stringify(messageData),
        })
            .then(response => {
                if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞: ${response.status}`);
                return response.text();
            })
            .then(data => {
                console.log("üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:", data);
                setNewMessage("");

                // ‚ùå –ù–ï –≤—ã–∑—ã–≤–∞–µ–º `fetchMessages()`, —Ç.–∫. WebSocket —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            })
            .catch(error => console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error));
    };

    // üîπ –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    const deleteMessage = (messageId) => {
        if (!messageId) {
            console.error("‚ùå –û—à–∏–±–∫–∞: ID —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
            return;
        }

        fetch(`http://localhost:8080/api/messages/delete/${messageId}`, {
            method: "DELETE",
            credentials: "include",
        })
            .then(response => {
                if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è");
                return response.text();
            })
            .then(() => {
                console.log(`üóëÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å ID ${messageId} —É–¥–∞–ª–µ–Ω–æ`);
                setSelectedMessage(null);
                fetchMessages();
            })
            .catch(error => console.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:", error));
    };


    // üîπ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    const editMessage = () => {
        if (!selectedMessage || !selectedMessage.id) {
            console.error("‚ùå –û—à–∏–±–∫–∞: ID —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
            return;
        }

        if (!editedMessage.trim()) return;

        const updatedMessageData = {
            content: editedMessage,
            roomId: activeChatId,
            timestamp: new Date().toISOString(),
            userDTO: {
                id: userId || parseInt(localStorage.getItem("userId"), 10), // ‚úÖ –¢–µ–ø–µ—Ä—å id –≤–Ω—É—Ç—Ä–∏ userDTO
            }
        };

        fetch(`http://localhost:8080/api/messages/edit/${selectedMessage.id}`, {
            method: "PUT",
            headers: { "Content-Type": "application/json" },
            credentials: "include",
            body: JSON.stringify(updatedMessageData),
        })
            .then(response => {
                if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è");
                return response.json();
            })
            .then(() => {
                setSelectedMessage(null);
                fetchMessages();
            })
            .catch(error => console.error("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:", error));
    };

    // üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
    const fetchChatUsers = () => {
        fetch(`http://localhost:8080/api/rooms/${activeChatId}/users`, {
            method: "GET",
            credentials: "include",
        })
            .then(response => response.json())
            .then(data => setUsers(data))
            .catch(error => console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:", error));
    };
    useEffect(() => {
        if (selectedMessage) {
            setEditedMessage(selectedMessage.content); // ‚úÖ –¢–µ–ø–µ—Ä—å –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–∫—Å—Ç –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è
        }
    }, [selectedMessage]);


    // üîπ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    const handleAddUser = () => {
        const userName = prompt("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:");
        if (!userName) return;

        fetch(`http://localhost:8080/api/rooms/addUser/${activeChatId}/${userName}`, {
            method: "GET",
            credentials: "include",
        })
            .then(response => response.text())
            .then(() => {
                alert(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userName} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç!`);
                fetchChatUsers();
            })
            .catch(error => alert(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`));
    };

    return (

        <div className="chat-container">
            {/* –•–µ–¥–µ—Ä —á–∞—Ç–∞ */}
            <div className="chat-header">
                <span className="chat-title">{chatInfo?.name || `–ß–∞—Ç ${activeChatId}`}</span>
                <button className="chat-info-btn" onClick={() => setIsModalOpen(true)}>‚ÑπÔ∏è</button>
            </div>

            <div className="chat-messages">
                {messages.map((message, index) => (
                    <Message
                        key={message.id || `msg-${index}`}
                        messageId={message.id}
                        content={message.content}
                        sender={{
                            name: message.userDTO?.username || "Anonymous",
                            avatarUrl: message.userDTO?.avatarUrl || "/default-avatar.webp",
                        }}
                        timestamp={message.timestamp}
                        isOwnMessage={message.userId === (userId || parseInt(localStorage.getItem("userId"), 10))}
                        onClick={() => {
                            console.log("üîπ –í—ã–±—Ä–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", message); // ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–µ–º –≤ `setSelectedMessage`
                            setSelectedMessage(message);
                        }}
                    />
                ))}
            </div>


            {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */}
            <div className="chat-input">
                <input
                    type="text"
                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                    value={newMessage}
                    onChange={(e) => setNewMessage(e.target.value)}
                    onKeyDown={(e) => e.key === "Enter" && sendMessage()}
                />
                <button onClick={sendMessage}>–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
            </div>

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π */}
            {selectedMessage && (
                <div className="message-edit-modal">
                    <div className="message-edit-content">
                        <h3>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ</h3>
                        <textarea
                            value={editedMessage}
                            onChange={(e) => setEditedMessage(e.target.value)}
                        />

                        <button onClick={() => editMessage(selectedMessage.id)}>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                        <button onClick={() => {
                            if (selectedMessage && selectedMessage.id) {
                                deleteMessage(selectedMessage.id);
                            } else {
                                console.error("‚ùå –û—à–∏–±–∫–∞: selectedMessage –∏–ª–∏ –µ–≥–æ ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", selectedMessage);
                            }
                        }}>–£–¥–∞–ª–∏—Ç—å
                        </button>
                        <button onClick={() => setSelectedMessage(null)}>–û—Ç–º–µ–Ω–∞</button>
                    </div>
                </div>
            )}


            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —á–∞—Ç–µ */}
            {isModalOpen && (
                <div className="chat-modal-overlay" onClick={() => setIsModalOpen(false)}>
                    <div className="chat-modal" onClick={(e) => e.stopPropagation()}>
                        <h2>{chatInfo?.name || `–ß–∞—Ç ${activeChatId}`}</h2>
                        <p>{chatInfo?.description || "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}</p>
                        <button className="chat-modal-btn" onClick={() => {
                            fetchChatUsers(); // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –æ–∫–Ω–∞
                            setIsUsersModalOpen(true);
                        }}>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö
                        </button>
                        <button className="chat-modal-btn" onClick={handleAddUser}>–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞</button>
                        <button className="chat-modal-close" onClick={() => setIsModalOpen(false)}>–ó–∞–∫—Ä—ã—Ç—å</button>
                    </div>
                </div>
            )}
            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ */}
            {isUsersModalOpen && (
                <div className="chat-modal-overlay" onClick={() => setIsUsersModalOpen(false)}>
                    <div className="chat-modal" onClick={(e) => e.stopPropagation()}>
                        <h2>–£—á–∞—Å—Ç–Ω–∏–∫–∏ —á–∞—Ç–∞</h2>
                        {users.length > 0 ? (
                            <ul className="chat-users-list">
                                {users.map(user => (
                                    <li key={user.id} className="chat-user">
                                        <img src={user.avatarUrl || "/default-avatar.webp"} alt="–ê–≤–∞—Ç–∞—Ä"
                                             className="user-avatar"/>
                                        <span>{user.username}</span>
                                    </li>
                                ))}
                            </ul>
                        ) : <p>–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</p>}
                        <button className="chat-modal-btn" onClick={fetchChatUsers}>–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫</button>
                        <button className="chat-modal-close" onClick={() => setIsUsersModalOpen(false)}>–ó–∞–∫—Ä—ã—Ç—å</button>
                    </div>
                </div>
            )}

        </div>
    );
};

export default ChatContainer;
